<assembly name="NUnit.Framework">

  <member name="M:NUnit.Framework.Assert.Fail(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Fail(System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Fail">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assertion.Fail">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assertion.Fail(System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Inconclusive(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Inconclusive(System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Inconclusive">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>

  <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Multiple(NUnit.Framework.TestDelegate)">
    <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Assert.Multiple(NUnit.Framework.AsyncTestDelegate)">
    <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.True(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.That(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assertion.Assert(System.String,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;void</argument>
    </attribute>
  </member>

  <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:true=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:true=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:true=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:true=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:true=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.False(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:true=&gt;void</argument>
    </attribute>
  </member>

  <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:null=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:null=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:null=&gt;void</argument>
    </attribute>
  </member>

  <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:null=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:null=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.NotNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:null=&gt;void</argument>
    </attribute>
  </member>

  <member name="M:NUnit.Framework.Assertion.AssertNotNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:null=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assertion.AssertNotNull(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:null=&gt;void</argument>
    </attribute>
  </member>

  <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:notnull=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:notnull=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.IsNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:notnull=&gt;void</argument>
    </attribute>
  </member>

  <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:notnull=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:notnull=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Null(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:notnull=&gt;void</argument>
    </attribute>
  </member>

  <member name="M:NUnit.Framework.Assertion.AssertNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:notnull=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assertion.AssertNull(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>anObject:notnull=&gt;void</argument>
    </attribute>
  </member>

  <member name="T:NUnit.Framework.SetUpFixtureAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.TestFixtureAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.TestAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.TestCaseAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.TestCaseSourceAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.TestFixtureSetUpAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.TestFixtureTearDownAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.SetUpAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.TearDownAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.OneTimeSetUpAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.OneTimeTearDownAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.CombiningStrategyAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.DataPointAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:NUnit.Framework.DataPointSourceAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  
  <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate)">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String)">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String,System.Object[])">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate)">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String)">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate)">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String)">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate)">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String)">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String,System.Object[])">
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
    <parameter name="code">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  
  <member name="M:NUnit.Framework.Assert.Ignore">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Ignore(System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  <member name="M:NUnit.Framework.Assert.Ignore(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;void</argument>
    </attribute>
  </member>
  
  <member name="M:NUnit.Framework.Is.Not">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.All">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.Null">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.True">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.False">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.Positive">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.Negative">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.Zero">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.NaN">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.Empty">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.Unique">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.BinarySerializable">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.XmlSerializable">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.EqualTo">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.SameAs">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.GreaterThan">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.GreaterThanOrEqualTo">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.AtLeast">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.LessThan">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.LessThanOrEqualTo">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.AtMost">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.TypeOf(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.TypeOf``1()">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.InstanceOf(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.InstanceOf``1()">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.AssignableFrom(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.AssignableFrom``1()">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.AssignableTo(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.AssignableTo``1()">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.EquivalentTo">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.SubsetOf">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.SupersetOf">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.Ordered">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.SamePath">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.SubPathOf">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.SamePathOrUnder">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.InRange">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Is.AnyOf">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Not">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.No">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.All">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Some">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.None">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Exactly">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.One">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Property">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Length">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Count">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Message">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InnerException">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute``1()">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.With">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Null">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.True">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.False">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Positive">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Negative">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Zero">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.NaN">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Empty">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Unique">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.BinarySerializable">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.XmlSerializable">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EqualTo">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SameAs">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThan">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThanOrEqualTo">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtLeast">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThan">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThanOrEqualTo">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtMost">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf``1()">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf``1()">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom``1()">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo``1()">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EquivalentTo">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubsetOf">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SupersetOf">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Ordered">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePath">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubPathOf">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePathOrUnder">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InRange">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AnyOf">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>

  <member name="M:NUnit.Framework.Constraints.Constraint.And">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.Constraint.With">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Constraints.Constraint.Or">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>

  <member name="M:NUnit.Framework.Does.Not">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Does.Exist">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Does.Contain(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Does.Contain(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Does.ContainKey">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Does.ContainValue">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Does.StartWith">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Does.EndWith">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Does.Match">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>

  <member name="M:NUnit.Framework.Contains.Item">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Contains.Key">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Contains.Value">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  <member name="M:NUnit.Framework.Contains.Substring">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor"/>
  </member>
  
</assembly>
