<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.VisualStudio.Protocol</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.BuildScript.IReSharperOOPModeZone">
            <summary>
            Service shell-level zone indicating ReSharper OOP mode activated
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.BuildScript.IVisualStudioBackendZone">
            <summary>
            Visual Studio integration backend components shell-level zone. 
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.BuildScript.IVisualStudioBackendOutOfProcessEnvZone">
            <summary>
            Zone for real out-of-process Visual Studio integration backend
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.BuildScript.IVisualStudioFrontendOutOfProcessZone">
            <summary>
            Shell-level zone inside Visual Studio that supports out-of-process
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.BuildScript.IVisualStudioProtocolEnvZone">
            <summary>
            Visual Studio protocol zone
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.BackToFront.DocumentModel.IVSDOHBackToFront">
            <summary>
            VsDocumentOperationsHandlerWhidbey interop called from backend to frontend
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.IDE.IVsEditorManagerBackToFrontInterop.CloseTextControlAsync(JetBrains.TextControl.ITextControl,JetBrains.IDE.CloseTextControlSaveOptions)">
            <summary>
            Closes text control in Visual Studio
            </summary>
            <param name="textControl">Text control to close. WILL BE REPLACED WITH TextControlId</param>
            <param name="mode">Close mode</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.IDE.IVsEditorManagerBackToFrontInterop.CreateTextControlForProjectFileAsync(JetBrains.ProjectModel.Search.IProjectFileSearchDescriptor,JetBrains.IDE.OpenFileOptions)">
            <summary>
            Creates text control for given project file with specified open file options
            </summary>
            <param name="projectModelElementSearchDescriptor">Project file's descriptor to create text control</param>
            <param name="openFileOptions">Open file options</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.IDE.IVsEditorManagerBackToFrontInterop.CreateTextControlForFilePathAsync(JetBrains.Util.FileSystemPath,JetBrains.IDE.TabOptions)">
            <summary>
            Creates text control for given project file with specified open file options
            </summary>
            <param name="fileNme">Path to the file to open</param>
            <param name="tabOptions">Open file tab options</param>
            <returns>Task when completed</returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.BackToFront.IDE.IVsEnsureWritableHandlerBackToFrontInterop">
            <summary>
            Supporting ensure writable handler in Visual Studio
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.IDE.IVsEnsureWritableHandlerBackToFrontInterop.TryMakeWritable(JetBrains.Platform.VisualStudio.Protocol.BackToFront.IDE.MakingWritableInteropArgs)">
            <summary>
            Called from backend to make files writable in Visual Studio
            </summary>
            <param name="args">Ensure writable args</param>
            <returns>Ensure writable result</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.IDE.IVsEnsureWritableHandlerBackToFrontInterop.QueryIsWritable(JetBrains.Util.FileSystemPath,JetBrains.DocumentModel.RunningDocumentId)">
            <summary>
            Queries Visual Studio whether the file is writable
            </summary>
            <param name="projectFileLocation">Project file path</param>
            <param name="documentId">Document Id corresponding to the project file</param>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.Protocol.BackToFront.Log.BackendExceptionPayload.Message">
            <summary>
            Message of the exception (usually one line)
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.Protocol.BackToFront.Log.BackendExceptionPayload.Text">
            <summary>
            String representation of the exception rendered by collecting all of the data about the original exception and all of the inner/related exceptions in the tree
            rendered without sensitive data
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.Protocol.BackToFront.Log.BackendExceptionPayload.TextWithSensitive">
            <summary>
            The same as above but including sensitive data
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.Protocol.BackToFront.Log.BackendExceptionPayload.StackTrace">
            <summary>
            Collected StackTrace string from throw side
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.ProjectDocuments.IVsProjectModelEditorInterop.Rename(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor,JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath,System.String)">
            <summary>
            Rename either project, project folder or file. 
            </summary>
            <returns>Null if OK. error message if fail. </returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.ProjectDocuments.IVsProjectModelEditorInterop.GetPropertiesEditor(JetBrains.Lifetimes.Lifetime,JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.String)">
            <summary>
            Get msbuild properties editor which will be valid for specific lifetime.
            May be not available, in this case null will be returned.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.ProjectDocuments.IVsProjectModelEditorInterop.DragAndDrop(JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor,JetBrains.ProjectModel.Search.IProjectFolderSearchDescriptor,System.UInt32)">
            <summary>
            Do drag-and-drop on Visual Studio Solution Explorer
            </summary>
            <param name="item"></param>
            <param name="targetFolder"></param>
            <param name="keyModifier">Drag-n-and drop effects, see KeyStateMasks or DragDropKeyStates class for reference</param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.BackToFront.ProjectModel.ISolutionExplorerInterop">
            <summary>
            Interop for <see cref="T:JetBrains.ProjectModel.ISolutionExplorer"/> interface
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.BackToFront.TextControl.IVsTextControlChangeUnitFactoryBackToFrontInterop">
            <summary>
            Change unit interop
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.TextControl.IVsTextControlChangeUnitFactoryBackToFrontInterop.CreateChangeUnit(JetBrains.DocumentModel.RunningDocumentId,System.String,JetBrains.TextControl.Util.TransactionKind)">
            <summary>
            Creates change unit for a specified change
            </summary>
            <param name="documentId">Id of of the document being changed</param>
            <param name="changeName">Name of the change</param>
            <param name="kind">Transaction kind</param>
            <returns>Id of the created changed unit</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.BackToFront.TextControl.IVsTextControlChangeUnitFactoryBackToFrontInterop.TerminateChangeUnit(System.Int32)">
            <summary>
            Terminates chang unit
            </summary>
            <param name="changeUnitId">Id of the change unit to terminate</param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.Common.DocumentModel.VsDocumentModelSynchronization">
            <summary>
            Allows callbacks from VS that come in response to our actions to merge into the current transaction.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.Protocol.Common.DocumentModel.VsDocumentModelSynchronization.UnguardedCallbacks">
            <summary>
            Allows callbacks from VS that come in response to our actions to merge into the current transaction.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.DocumentModel.IRunningDocumentsFrontToBackInterop.UnboundDocumentId">
            <summary>
            <see cref="T:JetBrains.DocumentModel.RunningDocumentId"/> that is unbound from document
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IDE.IVsEditorManagerFrontToBackInterop.TextControlMatchesProjectFile(JetBrains.TextControl.ITextControl,JetBrains.ProjectModel.Search.IProjectFileSearchDescriptor,JetBrains.Util.FileSystemPath)">
            <summary>
            Checks whether specified text control matches project file or project file location
            </summary>
            <param name="textControl">Text control in question</param>
            <param name="projectFileSearchDescriptor">Expected project file search descriptor</param>
            <param name="fallbackFilePath">Optional file location to check if not project file found matching the descriptor</param>
            <returns>True if matches</returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectsFrontToBackInterop">
            <summary>
            Interop to provide events about backend project add/remove.
            This should be used only for initial project creation handle and projects lifetime support.
            No any change events will be supported.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectsFrontToBackInterop.ProjectAdded">
            <summary>
            Fired on backend when project is added.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectsFrontToBackInterop.ProjectGuids">
            <summary>
            Backend project guids. May contain duplicates. 
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectTypeMapperFromEditor.TryDefineProjectTypeMapping(JetBrains.ProjectModel.Search.IProjectFileSearchDescriptor,System.Guid)">
            <summary>
            Try to define ProjectFileType for an unknown extension using known editorId
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskSettingsFrontToBackInterop.ProjectSynchronizationSettings">
            <summary>
            Project sync settings as specified in user settings
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskSettingsFrontToBackInterop.DeferredProjectFilePaths">
            <summary>
            Set of project file paths of deferred projects (Visual Studio 15 with LSL)
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskSettingsFrontToBackInterop.GetSolutionConfigurationAndPlatform">
            <summary>
            Returns current solution configuration and platform
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskSettingsFrontToBackInterop.AddDeferredProject(JetBrains.Util.FileSystemPath)">
            <summary>
            Tells the backend the project in deferred state and needs to load from disk
            </summary>
            <param name="projectFileLocation">Project file location (or folder in case of a website)</param>
            <returns>Task</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskSettingsFrontToBackInterop.RemovedDeferredProject(JetBrains.Util.FileSystemPath)">
            <summary>
            Tells the backend project is not in deferred state any more
            </summary>
            <param name="projectFileLocation">Project file location (or folder in case of a website)</param>
            <returns>Task</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskSettingsFrontToBackInterop.SetSolutionConfigurationAndPlatformAsync(JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ISolutionConfigurationAndPlatform)">
            <summary>
            Sets new solution 
            </summary>
            <param name="solutionConfigurationAndPlatform"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelQueryInterop">
             <summary>
             Provides a way to query <see cref="T:JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor"/> properties, children and parents from
             ReSharper backend
            
             Keep in mind that these methods are relatively slow, as they are forced to query information from backed and
             perform marshalling twice.
             </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskFrontToBackInterop.CurrentlyRunningSync">
            <summary>
            Whether synchronizer is idle
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskFrontToBackInterop.RecentSyncErrors">
            <summary>
            Errors happened while recent synchronization
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskFrontToBackInterop.ProjectsUpdatedFromDisk">
            <summary>
            Descriptors of projects updated from disk
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskFrontToBackInterop.SynchronizeProjectsAsync(System.String,System.Collections.Generic.JetHashSet{JetBrains.Util.FileSystemPath})">
            <summary>
            Requests project sync from disk
            </summary>
            <param name="reason">Reason for sync projects request</param>
            <param name="projectFilePaths">Project file locations (or folder for website) to sync. Empty means all</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskFrontToBackInterop.ScheduleInitialProjectSync(System.Boolean)">
            <summary>
            Schedules initial project synchronization
            </summary>
            <param name="isProjectModelLoadedFromCache">Whether project model is loaded from disk</param>
            <returns>Task to track its completion</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IProjectModelSynchronizerFromDiskFrontToBackInterop.PauseSyncAsync(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
            Pauses synchronization from disk for a certain <see cref="!:lifetime"/>
            </summary>
            <param name="lifetime">Lifetime for which sync is paused</param>
            <param name="reason">Reason to pause the sync</param>
            <returns>Task when completed</returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IUnloadedProjectsFrontToBackInterop">
            <summary>
            Unloaded project interop
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IUnloadedProjectsFrontToBackInterop.BeforeProjectsUnloadedAsync(System.Collections.Generic.IReadOnlyList{JetBrains.ProjectModel.Search.IProjectSearchDescriptor})">
            <summary>
            Called from frontend when project is being unloaded
            </summary>
            <param name="projectSearchDescriptors"></param>
            <returns>True when project is found</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IUnloadedProjectsFrontToBackInterop.BeforeProjectRemovedAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Called from frontend when project is being removed
            </summary>
            <param name="projectSearchDescriptor">Project search descriptors</param>
            <returns>True when project is found</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IUnloadedProjectsFrontToBackInterop.AfterProjectLoadedAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Called from frontend when project is loaded
            </summary>
            <param name="projectSearchDescriptor">Project search descriptors</param>
            <returns>True when project is found</returns>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IUnloadedProjectsFrontToBackInterop.ReferencesToAdd">
            <summary>
            Fired on backend when references to unloaded projects are updated. 
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IUnloadedProjectsFrontToBackInterop.ReferencesToRemove">
            <summary>
            Fired on backend when references to unloaded projects are updated. 
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IUnloadedProjectsFrontToBackInterop.BeforeProjectUnloadedSignal">
            <summary>
            Fired on backend when project is about to unload
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.IUnloadedProjectsFrontToBackInterop.AfterProjectReloadedSignal">
            <summary>
            Fired on backend when project is loaded
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.ProjectSyncMode">
            <summary>
            Specifies how project/ project mark/ IVsHierarchy is synchronized
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.ProjectSyncMode.FULLY_COM">
            <summary>
            Everything is done in Visual Studio via COM API
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.ProjectSyncMode.BACKEND_LOAD_COM_WRITE">
            <summary>
            Loaded from disk, write operations done in Visual Studio via COM API 
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.ProjectSyncMode.FULLY_BACKEND">
            <summary>
            Everything is done on backend (for deferred projects)
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.PropertiesExtender.IPropertiesExtenderFrontToBackInterop">
            <summary>
            Backend interface to implement property extenders
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.PropertiesExtender.IPropertiesExtenderFrontToBackInterop.CanExtend(JetBrains.ProjectModel.Search.IProjectItemSearchDescriptor)">
            <summary>
            Sync call from frontend to check if there are properties available 
            </summary>
            <param name="projectItemSearchDescriptor">Item search descriptor</param>
            <returns>Whether custom properties are available</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.PropertiesExtender.IPropertiesExtenderFrontToBackInterop.GetPropertyDescriptorArgs(JetBrains.ProjectModel.Search.IProjectItemSearchDescriptor)">
            <summary>
            Sync call from frontend to fetch property descriptors
            </summary>
            <param name="projectItemSearchDescriptor">Item search descriptor</param>
            <returns>Property descriptors</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.PropertiesExtender.IPropertiesExtenderFrontToBackInterop.GetPropertyValue(JetBrains.ProjectModel.Search.IProjectItemSearchDescriptor,System.String)">
            <summary>
            Sync call from frontend to fetch property value
            </summary>
            <param name="projectItemSearchDescriptor">Item search descriptor</param>
            <param name="propertyName">Name of the changed property</param>
            <returns>Property value</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.PropertiesExtender.IPropertiesExtenderFrontToBackInterop.SetPropertyValue(JetBrains.ProjectModel.Search.IProjectItemSearchDescriptor,System.String,System.Object)">
            <summary>
            Sync call from frontend to set property value
            </summary>
            <param name="projectItemSearchDescriptor">Item search descriptor</param>
            <param name="propertyName">Name of the changed property</param>
            <param name="value">New property value</param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectModel.PropertiesExtender.IPropertiesExtenderFrontToBackInterop.RunModalUIEditor(JetBrains.ProjectModel.Search.IProjectItemSearchDescriptor,System.String)">
            <summary>
            Sync call from frontend to run modal UI editor
            </summary>
            <param name="projectItemSearchDescriptor">Item search descriptor</param>
            <param name="propertyName">Name of the changed property</param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVsDocumentCommandProcessorFrontToBackInterop">
            <summary>
            Implements Undo/ Redo in Visual Studio
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVsDocumentCommandProcessorFrontToBackInterop.UndoRedoHandlersAdded">
            <summary>
            Fired when undo/ redo handlers need to be added to the IVsOleUndoManagerProvider
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVsDocumentCommandProcessorFrontToBackInterop.ExecuteDoHandlersAsync(System.Int32)">
            <summary>
            Executes DO handlers on backend
            </summary>
            <param name="handlersIndex">Handlers index</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVsDocumentCommandProcessorFrontToBackInterop.ExecuteUndoHandlersAsync(System.Int32)">
            <summary>
            Executes UNDO handlers on backend
            </summary>
            <param name="handlersIndex">Handlers index</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVsDocumentCommandProcessorFrontToBackInterop.ExecuteRedoHandlersAsync(System.Int32)">
            <summary>
            Executes REDO handlers on backend
            </summary>
            <param name="handlersIndex">Handlers index</param>
            <returns>Task when completed</returns>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVsDocumentManagerWhidbeyFrontToBackInterop.OnTextBufferDataChanged">
            <summary>
            Fired to fire OnTextBufferDataChanged on frontend
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVsDocumentManagerWhidbeyFrontToBackInterop.SynchronizeDocumentAsync(JetBrains.DocumentModel.RunningDocumentId,System.Boolean)">
            <summary>
            Synchronizes document 
            </summary>
            <param name="documentId">Id of the document to sync</param>
            <param name="reconcile">Whether to amrk as reconciled</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVsDocumentManagerWhidbeyFrontToBackInterop.SynchronizeDependentFilesAsync(JetBrains.DocumentModel.RunningDocumentId)">
            <summary>
            Synchronizes dependent files on master file change (i.e. generated C# from resources)
            </summary>
            <param name="documentId">Id of the document corresponding to a master file</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVsDocumentManagerWhidbeyFrontToBackInterop.ResetDocumentOperationsHandlerAsync(JetBrains.DocumentModel.RunningDocumentId,System.Boolean)">
            <summary>
            Resets document operations handler on text control close
            </summary>
            <param name="documentId">Id of the closed document</param>
            <param name="synchronizeText">Whether to synchronize document text. False if shared document is open</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVisualStudioToBackendInteropDocuments.GetOrCreateDocumentIdAsync(JetBrains.ProjectModel.Search.IProjectFileSearchDescriptor,System.String)">
            <summary>Returns <see cref="T:JetBrains.DocumentModel.RunningDocumentId"/> corresponding to the document of the project file matching <see cref="!:projectFileSearchDescriptor"/></summary>
            <param name="projectFileSearchDescriptor">Search descriptor of the file</param>
            <param name="documentOwner">In most cases it will be doc cookie.</param>
            <returns><see cref="T:JetBrains.DocumentModel.RunningDocumentId"/> of the corresponding document or <see cref="F:JetBrains.DocumentModel.RunningDocumentId.Invalid"/></returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVisualStudioToBackendInteropDocuments.ReleaseDocumentIdAsync(JetBrains.DocumentModel.RunningDocumentId,System.String)">
            <summary>
            Releases document id (i.e. when editor with the id is closed)
            </summary>
            <param name="documentId">Id of the document to release</param>
            <param name="documentOwner">In most cases it will be doc cookie.</param>
            <returns>Task</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectDocuments.IVisualStudioToBackendInteropDocuments.VisualStudioIsProcessingEvents(System.Boolean)">
            <summary>
            Called from VisualStudio to indicate events processing
            </summary>
            <param name="isProcessing"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.ProjectModel.IFrontToBackSolutionInterop">
            <summary>
            Interop to tell the backend to open/ close solution
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.ProjectModel.IFrontToBackSolutionInterop.CreateSolutionAsync(JetBrains.ProjectModel.impl.SolutionLocation)">
            <summary>
            Opens solution with specified location
            </summary>
            <param name="solutionLocation">Solution location</param>
            <returns>Task</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.ProjectModel.IFrontToBackSolutionInterop.CloseSolutionAsync">
            <summary>
            Closes current solution
            </summary>
            <returns>Task</returns>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.ProjectModel.IFrontToBackSolutionInterop.BackendReadyToRunTaskKind">
            <summary>
            Synchronization of solution load per <see cref="T:JetBrains.ProjectModel.Tasks.SolutionLoadTaskKinds"/>.
            Returns solution load task kinds ready to run
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.ProjectModel.IFrontToBackSolutionInterop.StartRunTaskKindsAsync(JetBrains.ProjectModel.Tasks.SolutionLoadTaskKinds)">
            <summary>
            Synchronization of solution load per <see cref="T:JetBrains.ProjectModel.Tasks.SolutionLoadTaskKinds"/>.
            Tells the backend to start executing load tasks of specified <see cref="!:kind"/> 
            </summary>
            <param name="kind"><see cref="T:JetBrains.ProjectModel.Tasks.SolutionLoadTaskKinds"/> allowed to be executed</param>
            <returns>Task</returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.IFrontToBackWireInterop">
            <summary>
            Wire interop back to front
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.IFrontToBackWireInterop.IsBackendConnected">
            <summary>
            Whether backend is running and ready to work. Mostly for testing purposes
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.IFrontToBackWireInterop.IsAlive">
            <summary>
            Recurrent signal whether backend is alive
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.IFrontToBackWireInterop.SetIsAliveFrequencyAsync(System.Int32)">
            <summary>
            Sets the frequency for the <see cref="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.IFrontToBackWireInterop.IsAlive"/> signal to be fired.
            O or negative means do not fire
            </summary>
            <param name="timeoutInMilliseconds">Frequency of the signal firing. O or negative means do not fire</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.IFrontToBackWireInterop.SetIsApplicationActiveAsync(System.Boolean)">
            <summary>
            Set application active state
            </summary>
            <param name="isApplicationActive">Whether application is active</param>
            <returns>Task when completed</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Wire.IFrontToBackWireInterop.ShutdownBackendAsync">
            <summary>
            Asynchronously shuts down the backend
            </summary>
            <returns>Task when completed</returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Internal.IVisualStudioToBackendInternalActionsInterop">
            <summary>
            Calls from Visual Studio internal actions
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Internal.IVisualStudioToBackendInternalActionsInterop.UpdateProjectModelFromFileSystemAsync(JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ISolutionConfigurationAndPlatform)">
            <summary>
            Async updates project model from file system for currently selected configuration
            </summary>
            <param name="solutionConfigurationAndPlatform">Current solution configuration and platform</param>
            <returns>Task to track its completion</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Internal.IVisualStudioToBackendInternalActionsInterop.ReloadProjectsFromFileSystemAndCollectLogsAsync(JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ISolutionConfigurationAndPlatform,System.Collections.Generic.JetHashSet{JetBrains.Util.FileSystemPath},JetBrains.Util.FileSystemPath)">
            <summary>
            Async updates selected project from file system for currently selected configuration and collects logs
            </summary>
            <param name="solutionConfigurationAndPlatform">Current solution configuration and platform</param>
            <param name="projectFilePaths">Paths to project files (and website locations) to reload.</param>
            <param name="logFilePath">Path to create log file where solution loader will write it's logs to. Msbuild lof will be created nearby</param>
            <returns>Task to track its completion</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Internal.IVisualStudioToBackendInternalActionsInterop.DumpWildcardContainer">
            <summary>
            Dumps wildcard container
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Internal.IVisualStudioToBackendInternalActionsInterop.TryGetProjectModelElementPresentation(JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor)">
            <summary>
            Try get presentation for project model element
            </summary>
            <param name="projectModelElementSearchDescriptor">Search descriptor to get project model presentation</param>
            <returns>Project model presentation string, or null in case of missing project model element</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.Internal.IVisualStudioToBackendInternalActionsInterop.DumpCppIntelliSenseInfo">
            <summary>
            Dumps C++ IntelliSense info
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop">
            <summary>
            Encapsulate calls from Visual Studio to backend on project model matter
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.UpdateOrCreateProjectAsync(JetBrains.ProjectModel.Update.IProjectDescriptor,JetBrains.ProjectModel.Update.UpdateFlags)">
            <summary>
            Calls <see cref="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.UpdateOrCreateProjectAsync(JetBrains.ProjectModel.Update.IProjectDescriptor,JetBrains.ProjectModel.Update.UpdateFlags)"/> on backend to update project to desired state 
            </summary>
            <param name="projectDescriptor">Desired state of the project</param>
            <param name="flags">Update flags such as whether to update project structure, send ProjectModelChange etc.</param>
            <returns>Task with changed or created project. Will continue on random thread without any lock. Don't forget to take read lock and check the returned project for validity</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.UpdateProjectReferencesAsync(System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Update.IProjectReferenceDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceProperties}}}},System.Boolean)">
            <summary>
            Calls <see cref="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.UpdateProjectReferencesAsync(System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Update.IProjectReferenceDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceProperties}}}},System.Boolean)"/> to update project references of several projects.
            </summary>
            <param name="descriptors">List of project search descriptors with corresponding reference descriptor</param>
            <param name="notifyChangeManager">Whether change manager needs to be notified</param>
            <returns>Task that completes when references are updated</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.FindProjectReference(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceDescriptor)">
            <summary>
            Calls to <see cref="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.FindProjectReference(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceDescriptor)"/>. TODO: will be removed as its only usage in GetOrCreateProjectItemByHierarchyItem. Wrong return type anyway
            </summary>
            <param name="projectSearchDescriptor">Project search descriptor</param>
            <param name="referenceDescriptor">Reference descriptor</param>
            <returns>Found reference or null</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.FindProjectReferenceByName(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.String,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Finds project and then fetches references by name TODO: will be removed as its only usage in GetOrCreateProjectItemByHierarchyItem. Wrong return type anyway
            </summary>
            <param name="projectSearchDescriptor">Project search descriptor</param>
            <param name="referenceName">Reference name</param>
            <param name="targetFrameworkId"></param>
            <returns>Found reference or null</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.FindProjectPackagesReference(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Assemblies.Interfaces.NugetId,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Finds project and then calls <see cref="M:JetBrains.ProjectModel.ProjectExtensions.GetPackagesReference(JetBrains.ProjectModel.IProject,JetBrains.ProjectModel.Assemblies.Interfaces.NugetId,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)"/> TODO: will be removed as its only usage in GetOrCreateProjectItemByHierarchyItem. Wrong return type anyway
            </summary>
            <param name="projectSearchDescriptor">Project search descriptor</param>
            <param name="nugetId">Nuget id</param>
            <param name="targetFrameworkId"></param>
            <returns>Found reference or null</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.AddReferenceAsync(JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ISolutionConfigurationAndPlatform,JetBrains.ProjectModel.Search.IProjectToModuleReferenceSearchDescriptor)">
            <summary>
            Find appropriate project host and add project reference 
            </summary>
            <param name="solutionConfigurationAndPlatform">Current solution configuration and platform</param>
            <param name="referenceSearchDescriptor">Search descriptor of reference to add</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.RemoveReferenceAsync(JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ISolutionConfigurationAndPlatform,JetBrains.ProjectModel.Search.IProjectToModuleReferenceSearchDescriptor)">
            <summary>
            Find appropriate project host and remove project reference 
            </summary>
            <param name="solutionConfigurationAndPlatform">Current solution configuration and platform</param>
            <param name="referenceDescriptor">Descriptor of reference to remove</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.HandleRenameAsync(System.Collections.Generic.IList{JetBrains.ProjectModel.Interop.RenameRequest})">
            <summary>
            Calls to <see cref="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleRenameAsync(System.Collections.Generic.IList{JetBrains.ProjectModel.Interop.RenameRequest})"/>> to handle rename from frontend.
            </summary>
            <param name="renames">List of renames</param>
            <returns>List of requests failed to be fulfilled</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.HandleMoveProjectAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Calls to <see cref="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleMoveProjectAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Search.IProjectSearchDescriptor)"/>> to handle move request from frontend.
            </summary>
            <param name="projectSearchDescriptor">Search descriptor of project to move</param>
            <param name="parentSearchDescriptor">New project's parent</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.HandleRemoveProjectAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Calls to <see cref="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleRemoveProjectAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)"/> to handle remove requests from frontend
            </summary>
            <param name="projectSearchDescriptor">Search descriptor of project to remove</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.HandleRemoveAsync(System.Collections.Generic.IList{JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor})">
            <summary>
            Calls to <see cref="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleRemoveAsync(System.Collections.Generic.IList{JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor})"/> to handle remove requests from frontend
            </summary>
            <param name="removes">List of requests to remove file or folder from the project</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.UpdateProjectFilePropertiesAsync(System.Collections.Generic.List{System.Tuple{JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.Properties.IProjectFileProperties}})">
            <summary>
            Calls to <see cref="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleUpdateProjectFilePropertiesAsync(System.Collections.Generic.List{System.Tuple{JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.Properties.IProjectFileProperties}})"/> to update file properties
            </summary>
            <param name="fileProperties">List of file properties to update</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.UpdateProjectsAsync(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.Search.IProjectSearchDescriptor},JetBrains.Platform.VisualStudio.Protocol.FrontToBack.ProjectUpdateReason)">
            <summary>
            Update specified projects
            </summary>
            <param name="projectSearchDescriptors">Project descriptors to update</param>
            <param name="updateReason">Reason of required project update</param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.FireUpdateAllProjectsAsync">
            <summary>
            Launch update of all projects via <see cref="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.UpdateProjects" /> signal
            via <see cref="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.UpdateProjects" /> signal
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.RemoveRedundantProjects(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.Search.IProjectSearchDescriptor})">
            <summary>
            Removes redundant project at the end of solution sync. 
            </summary>
            <param name="existingDescriptors">Project search descriptors for check</param>
            <returns>Set of project descriptors for which projects are missing and they need to be rebuilt.</returns>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.UpdateProjects">
            <summary>
            Fires on backend when a projects update are required. Frontend advises to the signal
            </summary>
            <remarks>Contains projects list for updating as keys and their update flags as values</remarks>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.UpdateVcxDebuggerPropertiesAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Properties.VCXProj.VcxDebuggerProperties)">
            <summary>
            Updates c++ project debugger properties
            </summary>
            <param name="projectSearchDescriptor">Descriptor to find project</param>
            <param name="debuggerProperties">Debugger properties</param>
            <returns>Task</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.Protocol.FrontToBack.IVisualStudioToBackendInterop.SetIsRoslynUsedToObtainReferences(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Boolean)">
            <summary>
            Mark project to use roslyn for references obtain
            </summary>
            <param name="projectSearchDescriptor">Descriptor to find project</param>
            <param name="isRoslynUsed">Is roslyn used</param>
            <returns>Task</returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.Protocol.Marshallers.ProjectSearchDescriptorMarshaller">
            <summary>
             Explicit marshaller for protection from VsHierarchyWrapper and VsHierarchyWrapperEx
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.IVsDocumentReadOnlyRegions">
            <summary>
            Can create readonly regions over various VS documents.
            Brought out of the Markup Model because the latter belongs to the text control zone, and this interface is required even in the DocumentModel zone.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.IVsDocumentReadOnlyRegions.MakeReadonly(JetBrains.DocumentModel.RunningDocumentId,JetBrains.Util.TextRange)">
            <summary>
            Creates a readonly lock for the given text range.
            </summary>
            <param name="documentId">Id of the document to create readonly lock in</param>
            <param name="range">Range in the document to create readonly lock in</param>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.IVsDocumentReadOnlyRegions.MakeWritable(JetBrains.DocumentModel.RunningDocumentId,JetBrains.Util.TextRange)">
            <summary>
            Removes a readonly lock for the given text range.
            </summary>
            <param name="documentId">Id of the document to remove readonly lock in</param>
            <param name="range">Range in the document to remove readonly lock in</param>
        </member>
        <member name="M:Platform.VisualStudio.Protocol.BackToFront.NuGet.IVsNugetModel.InstallPackage(System.String,JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.String,System.String,System.Boolean)">
            <summary>
            These calls are free-threaded, they will be started and there is no way to figure out when they are finished.
            You can use heuristic-based property <see cref="P:Platform.VisualStudio.Protocol.BackToFront.NuGet.IVsNugetModel.IsWorkingAsync"/>
            </summary>
        </member>
        <member name="M:Platform.VisualStudio.Protocol.BackToFront.NuGet.IVsNugetModel.GetInstalledPackagesAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Query: FileSystemPath of projects -> List of installed packages
            </summary>
        </member>
        <member name="T:Platform.VisualStudio.Protocol.BackToFront.NuGet.RdVsPackageMetadata">
            <summary>
            Wrapper of IVsPackageMetadata.
            </summary>
        </member>
        <member name="T:Platform.VisualStudio.Protocol.BackToFront.NuGet.RdVsPackageProjectMetadata">
            <summary>
            Wrapper for VsPackageProject metadata
            </summary>
        </member>
        <member name="T:Platform.VisualStudio.Protocol.FrontToBack.SinceVs14.RoslynUtil">
            <summary>
            We need this code in Platform.VisualStudio.Protocol.FrontToBack only till
            move ExpandDesignTimeFacadesPatcherVs2015 into VS version specific project 
            </summary>
        </member>
    </members>
</doc>
